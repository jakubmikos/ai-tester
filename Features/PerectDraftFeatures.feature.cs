// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PerfectDraftTests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "PerfectDraft")]
    [Xunit.TraitAttribute("Category", "E2E")]
    public partial class PerfectDraftWebsiteCoreFunctionalityFeature : object, Xunit.IClassFixture<PerfectDraftWebsiteCoreFunctionalityFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "PerfectDraft",
                "E2E"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "PerectDraftFeatures.feature"
#line hidden
        
        public PerfectDraftWebsiteCoreFunctionalityFeature(PerfectDraftWebsiteCoreFunctionalityFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, global::Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "PerfectDraft Website Core Functionality", "    As a beer enthusiast and potential customer\n    I want to browse, purchase an" +
                    "d manage PerfectDraft products\n    So that I can enjoy the ultimate home beer ex" +
                    "perience", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            global::Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 7
#line hidden
#line 8
    await testRunner.GivenAsync("I navigate to the PerfectDraft website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Select country from homepage")]
        [Xunit.TraitAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Xunit.TraitAttribute("Description", "Select country from homepage")]
        [Xunit.TraitAttribute("Category", "P1")]
        [Xunit.TraitAttribute("Category", "CountrySelection")]
        [Xunit.TraitAttribute("Category", "Smoke")]
        public async System.Threading.Tasks.Task SelectCountryFromHomepage()
        {
            string[] tagsOfScenario = new string[] {
                    "P1",
                    "CountrySelection",
                    "Smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Select country from homepage", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 12
    await testRunner.WhenAsync("I am on the country selection page", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 13
    await testRunner.ThenAsync("I should see the available regions \"Europe\" and \"America\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 14
    await testRunner.AndAsync("I should see country options including \"United Kingdom\", \"Deutschland\", \"United S" +
                        "tates\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 15
    await testRunner.WhenAsync("I select country \"United Kingdom\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 16
    await testRunner.ThenAsync("I should be redirected to the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 17
    await testRunner.AndAsync("the currency should be displayed in \"GBP\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 18
    await testRunner.AndAsync("the language should be \"English\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Navigate to different country websites")]
        [Xunit.TraitAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Xunit.TraitAttribute("Description", "Navigate to different country websites")]
        [Xunit.TraitAttribute("Category", "P1")]
        [Xunit.TraitAttribute("Category", "CountrySelection")]
        [Xunit.TraitAttribute("Category", "Regression")]
        [Xunit.InlineDataAttribute("United Kingdom", "GBP", "English", new string[0])]
        [Xunit.InlineDataAttribute("Deutschland", "EUR", "German", new string[0])]
        [Xunit.InlineDataAttribute("France", "EUR", "French", new string[0])]
        public async System.Threading.Tasks.Task NavigateToDifferentCountryWebsites(string country, string currency, string language, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "P1",
                    "CountrySelection",
                    "Regression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Country", country);
            argumentsOfScenario.Add("Currency", currency);
            argumentsOfScenario.Add("Language", language);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Navigate to different country websites", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 22
    await testRunner.WhenAsync("I am on the country selection page", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 23
    await testRunner.AndAsync(string.Format("I select country \"{0}\"", country), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 24
    await testRunner.ThenAsync(string.Format("I should be redirected to the \"{0}\" website", country), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 25
    await testRunner.AndAsync(string.Format("the currency should be displayed in \"{0}\"", currency), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 26
    await testRunner.AndAsync(string.Format("the language should be \"{0}\"", language), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Main website navigation")]
        [Xunit.TraitAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Xunit.TraitAttribute("Description", "Main website navigation")]
        [Xunit.TraitAttribute("Category", "P1")]
        [Xunit.TraitAttribute("Category", "Navigation")]
        [Xunit.TraitAttribute("Category", "Smoke")]
        public async System.Threading.Tasks.Task MainWebsiteNavigation()
        {
            string[] tagsOfScenario = new string[] {
                    "P1",
                    "Navigation",
                    "Smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Main website navigation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 36
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 37
    await testRunner.WhenAsync("I view the main navigation menu", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "Menu Item"});
                table1.AddRow(new string[] {
                            "PerfectDraft Machines"});
                table1.AddRow(new string[] {
                            "Beer Kegs"});
                table1.AddRow(new string[] {
                            "Multibuy"});
                table1.AddRow(new string[] {
                            "Keg Packs"});
                table1.AddRow(new string[] {
                            "Merchandise"});
                table1.AddRow(new string[] {
                            "Community Stores"});
                table1.AddRow(new string[] {
                            "Which machine"});
#line 38
    await testRunner.ThenAsync("I should see navigation options:", ((string)(null)), table1, "Then ");
#line hidden
#line 47
    await testRunner.AndAsync("the search functionality should be available", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 48
    await testRunner.AndAsync("the cart icon should show \"0\" items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Browse beer kegs catalog")]
        [Xunit.TraitAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Xunit.TraitAttribute("Description", "Browse beer kegs catalog")]
        [Xunit.TraitAttribute("Category", "P1")]
        [Xunit.TraitAttribute("Category", "ProductBrowsing")]
        [Xunit.TraitAttribute("Category", "Smoke")]
        public async System.Threading.Tasks.Task BrowseBeerKegsCatalog()
        {
            string[] tagsOfScenario = new string[] {
                    "P1",
                    "ProductBrowsing",
                    "Smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Browse beer kegs catalog", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 52
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 53
    await testRunner.WhenAsync("I navigate to the \"Beer Kegs\" section", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 54
    await testRunner.ThenAsync("I should see a list of available beer kegs", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 55
    await testRunner.AndAsync("each keg should display basic information", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 56
    await testRunner.AndAsync("I should be able to filter by beer type", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 57
    await testRunner.AndAsync("I should be able to sort by price or popularity", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="View PerfectDraft machine options")]
        [Xunit.TraitAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Xunit.TraitAttribute("Description", "View PerfectDraft machine options")]
        [Xunit.TraitAttribute("Category", "P1")]
        [Xunit.TraitAttribute("Category", "ProductBrowsing")]
        [Xunit.TraitAttribute("Category", "Smoke")]
        public async System.Threading.Tasks.Task ViewPerfectDraftMachineOptions()
        {
            string[] tagsOfScenario = new string[] {
                    "P1",
                    "ProductBrowsing",
                    "Smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("View PerfectDraft machine options", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 60
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 61
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 62
    await testRunner.WhenAsync("I navigate to the \"PerfectDraft Machines\" section", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Machine Type"});
                table2.AddRow(new string[] {
                            "PerfectDraft"});
                table2.AddRow(new string[] {
                            "PerfectDraft Pro"});
                table2.AddRow(new string[] {
                            "PerfectDraft Black"});
#line 63
    await testRunner.ThenAsync("I should see all machine types:", ((string)(null)), table2, "Then ");
#line hidden
#line 68
    await testRunner.WhenAsync("I click on a machine to view details", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 69
    await testRunner.ThenAsync("I should see machine specifications including keg size", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="View detailed product information")]
        [Xunit.TraitAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Xunit.TraitAttribute("Description", "View detailed product information")]
        [Xunit.TraitAttribute("Category", "P1")]
        [Xunit.TraitAttribute("Category", "ProductDetails")]
        [Xunit.TraitAttribute("Category", "Regression")]
        public async System.Threading.Tasks.Task ViewDetailedProductInformation()
        {
            string[] tagsOfScenario = new string[] {
                    "P1",
                    "ProductDetails",
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("View detailed product information", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 72
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 73
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 74
    await testRunner.WhenAsync("I navigate to the \"Kegs\" section", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 75
    await testRunner.AndAsync("I click on a beer keg \"Stella Artois 6L Keg\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 76
    await testRunner.ThenAsync("I should see the product detail page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "Detail Type"});
                table3.AddRow(new string[] {
                            "Product images"});
                table3.AddRow(new string[] {
                            "Full description"});
                table3.AddRow(new string[] {
                            "ABV and volume"});
                table3.AddRow(new string[] {
                            "Price information"});
                table3.AddRow(new string[] {
                            "Stock availability"});
                table3.AddRow(new string[] {
                            "Customer reviews"});
#line 77
    await testRunner.AndAsync("I should see detailed product information:", ((string)(null)), table3, "And ");
#line hidden
#line 85
    await testRunner.AndAsync("I should see an \"Add to Cart\" button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 86
    await testRunner.AndAsync("I should see related product recommendations", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search for specific products")]
        [Xunit.TraitAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Xunit.TraitAttribute("Description", "Search for specific products")]
        [Xunit.TraitAttribute("Category", "P1")]
        [Xunit.TraitAttribute("Category", "Search")]
        [Xunit.TraitAttribute("Category", "Regression")]
        public async System.Threading.Tasks.Task SearchForSpecificProducts()
        {
            string[] tagsOfScenario = new string[] {
                    "P1",
                    "Search",
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Search for specific products", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 89
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 90
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 91
    await testRunner.WhenAsync("I enter \"Stella\" in the search box", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 92
    await testRunner.AndAsync("I click the search button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 93
    await testRunner.ThenAsync("I should see search results containing \"Stella\" products", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 94
    await testRunner.AndAsync("the results should include both kegs and bundles", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 95
    await testRunner.AndAsync("I should be able to filter the search results", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 96
    await testRunner.WhenAsync("I enter \"InvalidProductName123\" in the search box", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 97
    await testRunner.AndAsync("I click the search button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 98
    await testRunner.ThenAsync("I should see a \"no results found\" message", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 99
    await testRunner.AndAsync("I should see suggestions for alternative searches", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="View promotional keg packs")]
        [Xunit.TraitAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Xunit.TraitAttribute("Description", "View promotional keg packs")]
        [Xunit.TraitAttribute("Category", "P2")]
        [Xunit.TraitAttribute("Category", "PromotionalOffers")]
        [Xunit.TraitAttribute("Category", "Regression")]
        public async System.Threading.Tasks.Task ViewPromotionalKegPacks()
        {
            string[] tagsOfScenario = new string[] {
                    "P2",
                    "PromotionalOffers",
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("View promotional keg packs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 103
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 104
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 105
    await testRunner.WhenAsync("I navigate to promotional keg packs", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 106
    await testRunner.ThenAsync("I should see current offers like \"Match Day Keg Pack\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "Pack Size",
                            "Price"});
                table4.AddRow(new string[] {
                            "2 kegs",
                            "£60.00"});
                table4.AddRow(new string[] {
                            "3 kegs",
                            "£85.00"});
#line 107
    await testRunner.AndAsync("I should see pricing options:", ((string)(null)), table4, "And ");
#line hidden
#line 111
    await testRunner.WhenAsync("I select \"3 kegs for £85.00\" keg pack", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 112
    await testRunner.ThenAsync("I should be able to choose from available keg options", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 113
    await testRunner.AndAsync("I should see the discount calculation", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 114
    await testRunner.AndAsync("promotional terms should be clearly displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Find Community Store locations")]
        [Xunit.TraitAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Xunit.TraitAttribute("Description", "Find Community Store locations")]
        [Xunit.TraitAttribute("Category", "P3")]
        [Xunit.TraitAttribute("Category", "CommunityStore")]
        [Xunit.TraitAttribute("Category", "Regression")]
        public async System.Threading.Tasks.Task FindCommunityStoreLocations()
        {
            string[] tagsOfScenario = new string[] {
                    "P3",
                    "CommunityStore",
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Find Community Store locations", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 117
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 118
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 119
    await testRunner.WhenAsync("I navigate to \"Community Store Network\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 120
    await testRunner.AndAsync("I enter postcode \"SW1A 1AA\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 121
    await testRunner.AndAsync("I click \"Find Stores\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 122
    await testRunner.ThenAsync("I should see a list of nearby Community Stores", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "Store Information"});
                table5.AddRow(new string[] {
                            "Store name"});
                table5.AddRow(new string[] {
                            "Address"});
                table5.AddRow(new string[] {
                            "Distance"});
                table5.AddRow(new string[] {
                            "Opening hours"});
                table5.AddRow(new string[] {
                            "Available services"});
#line 123
    await testRunner.AndAsync("each store should show:", ((string)(null)), table5, "And ");
#line hidden
#line 130
    await testRunner.AndAsync("I should be able to get directions to selected stores", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add products to shopping cart")]
        [Xunit.TraitAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Xunit.TraitAttribute("Description", "Add products to shopping cart")]
        [Xunit.TraitAttribute("Category", "P1")]
        [Xunit.TraitAttribute("Category", "ShoppingCart")]
        [Xunit.TraitAttribute("Category", "Smoke")]
        public async System.Threading.Tasks.Task AddProductsToShoppingCart()
        {
            string[] tagsOfScenario = new string[] {
                    "P1",
                    "ShoppingCart",
                    "Smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Add products to shopping cart", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 133
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 134
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 135
    await testRunner.AndAsync("my cart is empty", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 136
    await testRunner.WhenAsync("I navigate to the \"Kegs\" section", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 137
    await testRunner.AndAsync("I add \"PerfectDraft Stella Artois 6L Keg\" to the cart", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 138
    await testRunner.ThenAsync("the cart counter should show \"1\" item", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 139
    await testRunner.AndAsync("I should see a confirmation message", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 140
    await testRunner.WhenAsync("I click on the cart icon", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "Cart Information"});
                table6.AddRow(new string[] {
                            "Product name"});
                table6.AddRow(new string[] {
                            "Product image"});
                table6.AddRow(new string[] {
                            "Quantity"});
                table6.AddRow(new string[] {
                            "Unit price"});
                table6.AddRow(new string[] {
                            "Total price"});
#line 141
    await testRunner.ThenAsync("I should see the cart contents with:", ((string)(null)), table6, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Modify cart contents")]
        [Xunit.TraitAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Xunit.TraitAttribute("Description", "Modify cart contents")]
        [Xunit.TraitAttribute("Category", "P1")]
        [Xunit.TraitAttribute("Category", "ShoppingCart")]
        [Xunit.TraitAttribute("Category", "Regression")]
        public async System.Threading.Tasks.Task ModifyCartContents()
        {
            string[] tagsOfScenario = new string[] {
                    "P1",
                    "ShoppingCart",
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Modify cart contents", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 150
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 151
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 152
    await testRunner.AndAsync("I have \"Stella Artois 6L Keg\" in my cart", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 153
    await testRunner.WhenAsync("I view my cart", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 154
    await testRunner.AndAsync("I increase the quantity to \"2\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 155
    await testRunner.ThenAsync("the cart should show quantity \"2\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 156
    await testRunner.AndAsync("the total price should be updated accordingly", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 157
    await testRunner.WhenAsync("I click \"Remove\" for the item", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 158
    await testRunner.ThenAsync("the cart should be empty", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 159
    await testRunner.AndAsync("the cart counter should show \"0\" items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Complete checkout process as guest user")]
        [Xunit.TraitAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Xunit.TraitAttribute("Description", "Complete checkout process as guest user")]
        [Xunit.TraitAttribute("Category", "P1")]
        [Xunit.TraitAttribute("Category", "Checkout")]
        [Xunit.TraitAttribute("Category", "Critical")]
        public async System.Threading.Tasks.Task CompleteCheckoutProcessAsGuestUser()
        {
            string[] tagsOfScenario = new string[] {
                    "P1",
                    "Checkout",
                    "Critical"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Complete checkout process as guest user", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 162
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 163
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 164
    await testRunner.AndAsync("I am not logged in", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 165
    await testRunner.AndAsync("I have \"Stella Artois 6L Keg\" in my cart", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 166
    await testRunner.WhenAsync("I proceed to checkout", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 167
    await testRunner.AndAsync("I select \"Checkout as Guest\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table7.AddRow(new string[] {
                            "First Name",
                            "Jane"});
                table7.AddRow(new string[] {
                            "Last Name",
                            "Smith"});
                table7.AddRow(new string[] {
                            "Phone Number",
                            "+44 7700 900123"});
                table7.AddRow(new string[] {
                            "Address Line 1",
                            "123 Test Street"});
                table7.AddRow(new string[] {
                            "City",
                            "London"});
                table7.AddRow(new string[] {
                            "Postcode",
                            "SW1A 1AA"});
#line 168
    await testRunner.AndAsync("I fill in guest checkout information with email \"guest.user@example.com\":", ((string)(null)), table7, "And ");
#line hidden
#line 176
    await testRunner.AndAsync("I select \"Standard Delivery\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 177
    await testRunner.AndAsync("I enter valid payment details", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 178
    await testRunner.AndAsync("I confirm age verification (18+)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 179
    await testRunner.AndAsync("I click \"Place Order\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 180
    await testRunner.ThenAsync("I should see an order confirmation page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 181
    await testRunner.AndAsync("I should receive an order confirmation email at \"guest.user@example.com\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add new Camden Hells keg to shopping cart")]
        [Xunit.TraitAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Xunit.TraitAttribute("Description", "Add new Camden Hells keg to shopping cart")]
        [Xunit.TraitAttribute("Category", "P1")]
        [Xunit.TraitAttribute("Category", "ShoppingCart")]
        [Xunit.TraitAttribute("Category", "Smoke")]
        [Xunit.TraitAttribute("Category", "NewProduct")]
        public async System.Threading.Tasks.Task AddNewCamdenHellsKegToShoppingCart()
        {
            string[] tagsOfScenario = new string[] {
                    "P1",
                    "ShoppingCart",
                    "Smoke",
                    "NewProduct"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Add new Camden Hells keg to shopping cart", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 185
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 186
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 187
    await testRunner.AndAsync("my cart is empty", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 188
    await testRunner.WhenAsync("I navigate to the \"Kegs\" section", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 189
    await testRunner.AndAsync("I add \"Camden Hells 6L Keg\" to the cart", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 190
    await testRunner.WhenAsync("I click on the cart icon", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                            "Cart Information"});
                table8.AddRow(new string[] {
                            "Product name"});
                table8.AddRow(new string[] {
                            "Product image"});
                table8.AddRow(new string[] {
                            "Quantity"});
                table8.AddRow(new string[] {
                            "Unit price"});
                table8.AddRow(new string[] {
                            "Total price"});
#line 191
    await testRunner.ThenAsync("I should see the cart contents with:", ((string)(null)), table8, "Then ");
#line hidden
#line 198
    await testRunner.AndAsync("the cart counter should show \"1\" item", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="User authentication with different email formats", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Xunit.TraitAttribute("Description", "User authentication with different email formats")]
        [Xunit.TraitAttribute("Category", "P2")]
        [Xunit.TraitAttribute("Category", "UserAuthentication")]
        [Xunit.TraitAttribute("Category", "Regression")]
        [Xunit.InlineDataAttribute("user@example.com", new string[0])]
        [Xunit.InlineDataAttribute("user.name@example.co.uk", new string[0])]
        [Xunit.InlineDataAttribute("user+tag@example.org", new string[0])]
        [Xunit.InlineDataAttribute("user123@test-domain.com", new string[0])]
        public async System.Threading.Tasks.Task UserAuthenticationWithDifferentEmailFormats(string email, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "P2",
                    "UserAuthentication",
                    "Regression",
                    "Ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Email", email);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("User authentication with different email formats", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 201
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 202
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 203
    await testRunner.AndAsync(string.Format("I have a registered account with email \"{0}\"", email), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 204
    await testRunner.WhenAsync(string.Format("I attempt to login with email \"{0}\" and password \"SecurePassword123\"", email), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 205
    await testRunner.ThenAsync("I should be logged in successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 206
    await testRunner.AndAsync("I should see my account dashboard", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Register new user account", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Xunit.TraitAttribute("Description", "Register new user account")]
        [Xunit.TraitAttribute("Category", "P2")]
        [Xunit.TraitAttribute("Category", "UserRegistration")]
        [Xunit.TraitAttribute("Category", "Smoke")]
        public async System.Threading.Tasks.Task RegisterNewUserAccount()
        {
            string[] tagsOfScenario = new string[] {
                    "P2",
                    "UserRegistration",
                    "Smoke",
                    "Ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Register new user account", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 216
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 217
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 218
    await testRunner.WhenAsync("I click on \"Account\" in the navigation", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 219
    await testRunner.AndAsync("I click \"Register\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table9 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table9.AddRow(new string[] {
                            "Password",
                            "SecurePassword123"});
                table9.AddRow(new string[] {
                            "Confirm Password",
                            "SecurePassword123"});
                table9.AddRow(new string[] {
                            "First Name",
                            "John"});
                table9.AddRow(new string[] {
                            "Last Name",
                            "Doe"});
                table9.AddRow(new string[] {
                            "Date of Birth",
                            "15/06/1990"});
#line 220
    await testRunner.AndAsync("I fill in the registration form with email \"test.user@example.com\":", ((string)(null)), table9, "And ");
#line hidden
#line 227
    await testRunner.AndAsync("I accept the terms and conditions", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 228
    await testRunner.AndAsync("I accept age verification (18+)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 229
    await testRunner.AndAsync("I click \"Create Account\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 230
    await testRunner.ThenAsync("I should see a registration confirmation message", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 231
    await testRunner.AndAsync("I should receive an email verification for \"test.user@example.com\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 232
    await testRunner.AndAsync("I should be automatically logged in", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="User login and logout", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Xunit.TraitAttribute("Description", "User login and logout")]
        [Xunit.TraitAttribute("Category", "P1")]
        [Xunit.TraitAttribute("Category", "UserAuthentication")]
        [Xunit.TraitAttribute("Category", "Smoke")]
        public async System.Threading.Tasks.Task UserLoginAndLogout()
        {
            string[] tagsOfScenario = new string[] {
                    "P1",
                    "UserAuthentication",
                    "Smoke",
                    "Ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("User login and logout", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 235
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 236
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 237
    await testRunner.AndAsync("I have a registered account with email \"test.user@example.com\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 238
    await testRunner.WhenAsync("I click on \"Account\" in the navigation", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 239
    await testRunner.AndAsync("I click \"Login\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 240
    await testRunner.AndAsync("I login with email \"test.user@example.com\" and password \"SecurePassword123\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 241
    await testRunner.ThenAsync("I should be logged in successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 242
    await testRunner.AndAsync("I should see \"Welcome John\" in the account section", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 243
    await testRunner.WhenAsync("I click \"Logout\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 244
    await testRunner.ThenAsync("I should be logged out", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 245
    await testRunner.AndAsync("I should see the \"Login\" option again", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Complete checkout process as registered user", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Xunit.TraitAttribute("Description", "Complete checkout process as registered user")]
        [Xunit.TraitAttribute("Category", "P1")]
        [Xunit.TraitAttribute("Category", "Checkout")]
        [Xunit.TraitAttribute("Category", "Critical")]
        public async System.Threading.Tasks.Task CompleteCheckoutProcessAsRegisteredUser()
        {
            string[] tagsOfScenario = new string[] {
                    "P1",
                    "Checkout",
                    "Critical",
                    "Ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Complete checkout process as registered user", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 248
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 249
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 250
    await testRunner.AndAsync("I am logged in with email \"test.user@example.com\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 251
    await testRunner.AndAsync("I have \"Stella Artois 6L Keg\" in my cart", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 252
    await testRunner.WhenAsync("I proceed to checkout", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table10 = new global::Reqnroll.Table(new string[] {
                            "Section"});
                table10.AddRow(new string[] {
                            "Order summary"});
                table10.AddRow(new string[] {
                            "Shipping address"});
                table10.AddRow(new string[] {
                            "Delivery options"});
                table10.AddRow(new string[] {
                            "Payment method"});
#line 253
    await testRunner.ThenAsync("I should see the checkout page with:", ((string)(null)), table10, "Then ");
#line hidden
#line 259
    await testRunner.WhenAsync("I confirm my shipping address", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 260
    await testRunner.AndAsync("I select \"Standard Delivery\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table11 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table11.AddRow(new string[] {
                            "Card Number",
                            "4532123456789012"});
                table11.AddRow(new string[] {
                            "Expiry Date",
                            "12/25"});
                table11.AddRow(new string[] {
                            "CVV",
                            "123"});
                table11.AddRow(new string[] {
                            "Cardholder Name",
                            "John Doe"});
#line 261
    await testRunner.AndAsync("I enter valid payment details:", ((string)(null)), table11, "And ");
#line hidden
#line 267
    await testRunner.AndAsync("I click \"Place Order\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 268
    await testRunner.ThenAsync("I should see an order confirmation page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 269
    await testRunner.AndAsync("I should receive an order confirmation email at \"test.user@example.com\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 270
    await testRunner.AndAsync("I should see an order tracking number", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="View Beer Token information", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Xunit.TraitAttribute("Description", "View Beer Token information")]
        [Xunit.TraitAttribute("Category", "P2")]
        [Xunit.TraitAttribute("Category", "BeerTokens")]
        [Xunit.TraitAttribute("Category", "Regression")]
        public async System.Threading.Tasks.Task ViewBeerTokenInformation()
        {
            string[] tagsOfScenario = new string[] {
                    "P2",
                    "BeerTokens",
                    "Regression",
                    "Ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("View Beer Token information", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 273
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 274
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 275
    await testRunner.AndAsync("I am logged in as a registered user", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 276
    await testRunner.WhenAsync("I navigate to my account dashboard", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 277
    await testRunner.ThenAsync("I should see my Beer Token balance", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table12 = new global::Reqnroll.Table(new string[] {
                            "Earning Method",
                            "Token Value"});
                table12.AddRow(new string[] {
                            "Keg return",
                            "£5.00"});
                table12.AddRow(new string[] {
                            "Purchase reward (5%)",
                            "Variable"});
                table12.AddRow(new string[] {
                            "Guest order (3 days)",
                            "Variable"});
#line 278
    await testRunner.AndAsync("I should see information about earning tokens:", ((string)(null)), table12, "And ");
#line hidden
#line 283
    await testRunner.AndAsync("I should see token expiration information \"6 months\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 284
    await testRunner.AndAsync("I should see how to redeem tokens", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Apply Beer Tokens during checkout", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Xunit.TraitAttribute("Description", "Apply Beer Tokens during checkout")]
        [Xunit.TraitAttribute("Category", "P2")]
        [Xunit.TraitAttribute("Category", "BeerTokens")]
        [Xunit.TraitAttribute("Category", "Regression")]
        public async System.Threading.Tasks.Task ApplyBeerTokensDuringCheckout()
        {
            string[] tagsOfScenario = new string[] {
                    "P2",
                    "BeerTokens",
                    "Regression",
                    "Ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Apply Beer Tokens during checkout", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 287
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 288
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 289
    await testRunner.AndAsync("I am logged in as a user with \"£10.00\" in Beer Tokens", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 290
    await testRunner.AndAsync("I have \"Stella Artois 6L Keg\" priced at \"£32.50\" in my cart", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 291
    await testRunner.WhenAsync("I proceed to checkout", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 292
    await testRunner.ThenAsync("I should see my Beer Token balance \"£10.00\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 293
    await testRunner.WhenAsync("I select \"Apply Beer Tokens\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 294
    await testRunner.AndAsync("I choose to apply \"£10.00\" tokens", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 295
    await testRunner.ThenAsync("the order total should be reduced by \"£10.00\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 296
    await testRunner.AndAsync("my new total should be \"£22.50\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 297
    await testRunner.WhenAsync("I complete the checkout process", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 298
    await testRunner.ThenAsync("my Beer Token balance should be \"£0.00\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Apply Beer Tokens during checkout for different users", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Xunit.TraitAttribute("Description", "Apply Beer Tokens during checkout for different users")]
        [Xunit.TraitAttribute("Category", "P2")]
        [Xunit.TraitAttribute("Category", "BeerTokens")]
        [Xunit.TraitAttribute("Category", "Regression")]
        [Xunit.InlineDataAttribute("user1@example.com", "£10.00", "£10.00", new string[0])]
        [Xunit.InlineDataAttribute("user2@example.com", "£15.00", "£10.00", new string[0])]
        [Xunit.InlineDataAttribute("user3@example.com", "£5.00", "£5.00", new string[0])]
        public async System.Threading.Tasks.Task ApplyBeerTokensDuringCheckoutForDifferentUsers(string email, string tokenAmount, string applyAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "P2",
                    "BeerTokens",
                    "Regression",
                    "Ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("TokenAmount", tokenAmount);
            argumentsOfScenario.Add("ApplyAmount", applyAmount);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Apply Beer Tokens during checkout for different users", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 301
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 302
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 303
    await testRunner.AndAsync(string.Format("I am logged in with email \"{0}\"", email), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 304
    await testRunner.AndAsync(string.Format("I have \"{0}\" in Beer Tokens", tokenAmount), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 305
    await testRunner.AndAsync("I have \"Stella Artois 6L Keg\" priced at \"£32.50\" in my cart", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 306
    await testRunner.WhenAsync("I proceed to checkout", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 307
    await testRunner.ThenAsync(string.Format("I should see my Beer Token balance \"{0}\"", tokenAmount), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 308
    await testRunner.WhenAsync("I select \"Apply Beer Tokens\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 309
    await testRunner.AndAsync(string.Format("I choose to apply \"{0}\" tokens", applyAmount), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 310
    await testRunner.ThenAsync(string.Format("the order total should be reduced by \"{0}\"", applyAmount), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 311
    await testRunner.WhenAsync("I complete the checkout process", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 312
    await testRunner.ThenAsync(string.Format("I should receive an order confirmation email at \"{0}\"", email), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Initiate keg return process", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Xunit.TraitAttribute("Description", "Initiate keg return process")]
        [Xunit.TraitAttribute("Category", "P2")]
        [Xunit.TraitAttribute("Category", "KegReturns")]
        [Xunit.TraitAttribute("Category", "Regression")]
        public async System.Threading.Tasks.Task InitiateKegReturnProcess()
        {
            string[] tagsOfScenario = new string[] {
                    "P2",
                    "KegReturns",
                    "Regression",
                    "Ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Initiate keg return process", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 321
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 322
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 323
    await testRunner.AndAsync("I am logged in as a registered user", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 324
    await testRunner.WhenAsync("I navigate to \"Keg Returns\" section", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 325
    await testRunner.AndAsync("I click \"Return Kegs\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table13 = new global::Reqnroll.Table(new string[] {
                            "Return Method"});
                table13.AddRow(new string[] {
                            "Courier Collection"});
                table13.AddRow(new string[] {
                            "Community Store"});
#line 326
    await testRunner.ThenAsync("I should see the keg return options:", ((string)(null)), table13, "Then ");
#line hidden
#line 330
    await testRunner.WhenAsync("I select \"Courier Collection\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 331
    await testRunner.AndAsync("I specify \"2\" kegs to return", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 332
    await testRunner.AndAsync("I confirm my collection address", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 333
    await testRunner.ThenAsync("I should be able to generate return labels", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 334
    await testRunner.AndAsync("I should see the estimated Beer Token credit \"£10.00\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 335
    await testRunner.AndAsync("I should receive return instructions", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="View order history as registered user", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Xunit.TraitAttribute("Description", "View order history as registered user")]
        [Xunit.TraitAttribute("Category", "P2")]
        [Xunit.TraitAttribute("Category", "OrderHistory")]
        [Xunit.TraitAttribute("Category", "Regression")]
        public async System.Threading.Tasks.Task ViewOrderHistoryAsRegisteredUser()
        {
            string[] tagsOfScenario = new string[] {
                    "P2",
                    "OrderHistory",
                    "Regression",
                    "Ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("View order history as registered user", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 338
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 339
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 340
    await testRunner.AndAsync("I am logged in as a user with previous orders", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 341
    await testRunner.WhenAsync("I navigate to \"My Orders\" in my account", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 342
    await testRunner.ThenAsync("I should see a list of my previous orders", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table14 = new global::Reqnroll.Table(new string[] {
                            "Order Information"});
                table14.AddRow(new string[] {
                            "Order number"});
                table14.AddRow(new string[] {
                            "Order date"});
                table14.AddRow(new string[] {
                            "Order total"});
                table14.AddRow(new string[] {
                            "Order status"});
                table14.AddRow(new string[] {
                            "Tracking info"});
#line 343
    await testRunner.AndAsync("each order should display:", ((string)(null)), table14, "And ");
#line hidden
#line 350
    await testRunner.WhenAsync("I click on an order", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 351
    await testRunner.ThenAsync("I should see detailed order information", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 352
    await testRunner.AndAsync("I should be able to track the shipment", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 353
    await testRunner.AndAsync("I should have options to reorder or contact support", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Email notifications for different user actions", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Xunit.TraitAttribute("Description", "Email notifications for different user actions")]
        [Xunit.TraitAttribute("Category", "P2")]
        [Xunit.TraitAttribute("Category", "EmailNotifications")]
        [Xunit.TraitAttribute("Category", "Regression")]
        [Xunit.InlineDataAttribute("user@example.com", "Complete order", "Order confirmation", new string[0])]
        [Xunit.InlineDataAttribute("user@example.com", "Initiate keg return", "Return instructions", new string[0])]
        [Xunit.InlineDataAttribute("user@example.com", "Register account", "Email verification", new string[0])]
        [Xunit.InlineDataAttribute("user@example.com", "Reset password", "Password reset link", new string[0])]
        public async System.Threading.Tasks.Task EmailNotificationsForDifferentUserActions(string email, string action, string emailContent, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "P2",
                    "EmailNotifications",
                    "Regression",
                    "Ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Action", action);
            argumentsOfScenario.Add("EmailContent", emailContent);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Email notifications for different user actions", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 356
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 357
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 358
    await testRunner.AndAsync(string.Format("I am logged in with email \"{0}\"", email), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 359
    await testRunner.WhenAsync(string.Format("I perform the action \"{0}\"", action), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 360
    await testRunner.ThenAsync(string.Format("I should receive an email notification at \"{0}\"", email), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 361
    await testRunner.AndAsync(string.Format("the email should contain \"{0}\"", emailContent), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await PerfectDraftWebsiteCoreFunctionalityFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await PerfectDraftWebsiteCoreFunctionalityFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
