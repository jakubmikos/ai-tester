// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PerfectDraftTests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class PerfectDraftWebsiteCoreFunctionalityFeature
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = new string[] {
                "PerfectDraft",
                "E2E"};
        
#line 1 "PerectDraftFeatures.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, System.Threading.Thread.CurrentThread.ManagedThreadId.ToString());
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "PerfectDraft Website Core Functionality", ("    As a beer enthusiast and potential customer\r\n    I want to browse, purchase a" +
                    "nd manage PerfectDraft products\r\n    So that I can enjoy the ultimate home beer " +
                    "experience"), global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "PerfectDraft Website Core Functionality")))
            {
                await global::PerfectDraftTests.Features.PerfectDraftWebsiteCoreFunctionalityFeature.FeatureSetupAsync(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 7
#line hidden
#line 8
    await testRunner.GivenAsync("I navigate to the PerfectDraft website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("User authentication with different email formats")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PerfectDraft")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("E2E")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("P2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UserAuthentication")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("user@example.com", "", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("user.name@example.co.uk", "", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("user+tag@example.org", "", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("user123@test-domain.com", "", null)]
        public async System.Threading.Tasks.Task UserAuthenticationWithDifferentEmailFormats(string email, string notUsed6248, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "P2",
                    "UserAuthentication",
                    "Regression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Email", email);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("User authentication with different email formats", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 12
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 13
    await testRunner.AndAsync(string.Format("I have a registered account with email \"{0}\"", email), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 14
    await testRunner.WhenAsync(string.Format("I attempt to login with email \"{0}\" and password \"SecurePassword123\"", email), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 15
    await testRunner.ThenAsync("I should be logged in successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 16
    await testRunner.AndAsync("I should see my account dashboard", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Apply Beer Tokens during checkout for different users")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PerfectDraft")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("E2E")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("P2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BeerTokens")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("user1@example.com", "£10.00", "£10.00", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("user2@example.com", "£15.00", "£10.00", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("user3@example.com", "£5.00", "£5.00", null)]
        public async System.Threading.Tasks.Task ApplyBeerTokensDuringCheckoutForDifferentUsers(string email, string tokenAmount, string applyAmount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "P2",
                    "BeerTokens",
                    "Regression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("TokenAmount", tokenAmount);
            argumentsOfScenario.Add("ApplyAmount", applyAmount);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Apply Beer Tokens during checkout for different users", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 27
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 28
    await testRunner.AndAsync(string.Format("I am logged in with email \"{0}\"", email), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 29
    await testRunner.AndAsync(string.Format("I have \"{0}\" in Beer Tokens", tokenAmount), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 30
    await testRunner.AndAsync("I have \"Stella Artois 6L Keg\" priced at \"£32.50\" in my cart", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 31
    await testRunner.WhenAsync("I proceed to checkout", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 32
    await testRunner.ThenAsync(string.Format("I should see my Beer Token balance \"{0}\"", tokenAmount), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 33
    await testRunner.WhenAsync("I select \"Apply Beer Tokens\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 34
    await testRunner.AndAsync(string.Format("I choose to apply \"{0}\" tokens", applyAmount), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 35
    await testRunner.ThenAsync(string.Format("the order total should be reduced by \"{0}\"", applyAmount), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 36
    await testRunner.WhenAsync("I complete the checkout process", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 37
    await testRunner.ThenAsync(string.Format("I should receive an order confirmation email at \"{0}\"", email), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Email notifications for different user actions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PerfectDraft")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("E2E")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("P2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("EmailNotifications")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("user@example.com", "Complete order", "Order confirmation", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("user@example.com", "Initiate keg return", "Return instructions", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("user@example.com", "Register account", "Email verification", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("user@example.com", "Reset password", "Password reset link", null)]
        public async System.Threading.Tasks.Task EmailNotificationsForDifferentUserActions(string email, string action, string emailContent, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "P2",
                    "EmailNotifications",
                    "Regression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Action", action);
            argumentsOfScenario.Add("EmailContent", emailContent);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Email notifications for different user actions", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 47
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 48
    await testRunner.AndAsync(string.Format("I am logged in with email \"{0}\"", email), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 49
    await testRunner.WhenAsync(string.Format("I perform the action \"{0}\"", action), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 50
    await testRunner.ThenAsync(string.Format("I should receive an email notification at \"{0}\"", email), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 51
    await testRunner.AndAsync(string.Format("the email should contain \"{0}\"", emailContent), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Select country from homepage")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PerfectDraft")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("E2E")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("P1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CountrySelection")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        public async System.Threading.Tasks.Task SelectCountryFromHomepage()
        {
            string[] tagsOfScenario = new string[] {
                    "P1",
                    "CountrySelection",
                    "Smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Select country from homepage", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 61
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 62
    await testRunner.WhenAsync("I am on the country selection page", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 63
    await testRunner.ThenAsync("I should see the available regions \"Europe\" and \"America\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 64
    await testRunner.AndAsync(("I should see country options including \"United Kingdom\", \"Deutschland\", \"United S" +
                        "tates\""), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 65
    await testRunner.WhenAsync("I select country \"United Kingdom\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 66
    await testRunner.ThenAsync("I should be redirected to the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 67
    await testRunner.AndAsync("the currency should be displayed in \"GBP\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 68
    await testRunner.AndAsync("the language should be \"English\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Navigate to different country websites")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PerfectDraft")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("E2E")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("P1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CountrySelection")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("United Kingdom", "GBP", "English", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Deutschland", "EUR", "German", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("France", "EUR", "French", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("United States", "USD", "English", null)]
        public async System.Threading.Tasks.Task NavigateToDifferentCountryWebsites(string country, string currency, string language, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "P1",
                    "CountrySelection",
                    "Regression"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Country", country);
            argumentsOfScenario.Add("Currency", currency);
            argumentsOfScenario.Add("Language", language);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Navigate to different country websites", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 71
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 72
    await testRunner.WhenAsync("I am on the country selection page", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 73
    await testRunner.AndAsync(string.Format("I select country \"{0}\"", country), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 74
    await testRunner.ThenAsync(string.Format("I should be redirected to the \"{0}\" website", country), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 75
    await testRunner.AndAsync(string.Format("the currency should be displayed in \"{0}\"", currency), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 76
    await testRunner.AndAsync(string.Format("the language should be \"{0}\"", language), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Main website navigation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PerfectDraft")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("E2E")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("P1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Navigation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        public async System.Threading.Tasks.Task MainWebsiteNavigation()
        {
            string[] tagsOfScenario = new string[] {
                    "P1",
                    "Navigation",
                    "Smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Main website navigation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 86
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 87
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 88
    await testRunner.WhenAsync("I view the main navigation menu", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "Menu Item"});
                table1.AddRow(new string[] {
                            "Machines"});
                table1.AddRow(new string[] {
                            "Kegs"});
                table1.AddRow(new string[] {
                            "Bundles"});
                table1.AddRow(new string[] {
                            "Community"});
                table1.AddRow(new string[] {
                            "Account"});
#line 89
    await testRunner.ThenAsync("I should see navigation options:", ((string)(null)), table1, "Then ");
#line hidden
#line 96
    await testRunner.AndAsync("the search functionality should be available", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 97
    await testRunner.AndAsync("the cart icon should show \"0\" items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Browse beer kegs catalog")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PerfectDraft")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("E2E")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("P1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ProductBrowsing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        public async System.Threading.Tasks.Task BrowseBeerKegsCatalog()
        {
            string[] tagsOfScenario = new string[] {
                    "P1",
                    "ProductBrowsing",
                    "Smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Browse beer kegs catalog", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 100
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 101
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 102
    await testRunner.WhenAsync("I navigate to the \"Kegs\" section", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 103
    await testRunner.ThenAsync("I should see a list of available beer kegs", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Information"});
                table2.AddRow(new string[] {
                            "Product image"});
                table2.AddRow(new string[] {
                            "Beer name"});
                table2.AddRow(new string[] {
                            "Brand"});
                table2.AddRow(new string[] {
                            "ABV percentage"});
                table2.AddRow(new string[] {
                            "Price in GBP"});
                table2.AddRow(new string[] {
                            "Stock status"});
#line 104
    await testRunner.AndAsync("each keg should display:", ((string)(null)), table2, "And ");
#line hidden
#line 112
    await testRunner.AndAsync("I should be able to filter by beer type", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 113
    await testRunner.AndAsync("I should be able to sort by price or popularity", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("View PerfectDraft machine options")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PerfectDraft")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("E2E")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("P1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ProductBrowsing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        public async System.Threading.Tasks.Task ViewPerfectDraftMachineOptions()
        {
            string[] tagsOfScenario = new string[] {
                    "P1",
                    "ProductBrowsing",
                    "Smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("View PerfectDraft machine options", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 116
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 117
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 118
    await testRunner.WhenAsync("I navigate to the \"Machines\" section", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "Machine Type"});
                table3.AddRow(new string[] {
                            "PerfectDraft"});
                table3.AddRow(new string[] {
                            "PerfectDraft Pro"});
#line 119
    await testRunner.ThenAsync("I should see both machine types:", ((string)(null)), table3, "Then ");
#line hidden
#line 123
    await testRunner.AndAsync("each machine should display specifications", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 124
    await testRunner.AndAsync("I should see feature comparisons between Standard and Pro", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 125
    await testRunner.AndAsync("bundle options should be available", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("View detailed product information")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PerfectDraft")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("E2E")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("P1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ProductDetails")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        public async System.Threading.Tasks.Task ViewDetailedProductInformation()
        {
            string[] tagsOfScenario = new string[] {
                    "P1",
                    "ProductDetails",
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("View detailed product information", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 128
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 129
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 130
    await testRunner.WhenAsync("I navigate to the \"Kegs\" section", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 131
    await testRunner.AndAsync("I click on a beer keg \"Stella Artois 6L Keg\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 132
    await testRunner.ThenAsync("I should see the product detail page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "Detail Type"});
                table4.AddRow(new string[] {
                            "Product images"});
                table4.AddRow(new string[] {
                            "Full description"});
                table4.AddRow(new string[] {
                            "ABV and volume"});
                table4.AddRow(new string[] {
                            "Price information"});
                table4.AddRow(new string[] {
                            "Stock availability"});
                table4.AddRow(new string[] {
                            "Customer reviews"});
#line 133
    await testRunner.AndAsync("I should see detailed product information:", ((string)(null)), table4, "And ");
#line hidden
#line 141
    await testRunner.AndAsync("I should see an \"Add to Cart\" button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 142
    await testRunner.AndAsync("I should see related product recommendations", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Search for specific products")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PerfectDraft")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("E2E")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("P1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Search")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        public async System.Threading.Tasks.Task SearchForSpecificProducts()
        {
            string[] tagsOfScenario = new string[] {
                    "P1",
                    "Search",
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Search for specific products", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 145
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 146
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 147
    await testRunner.WhenAsync("I enter \"Stella\" in the search box", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 148
    await testRunner.AndAsync("I click the search button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 149
    await testRunner.ThenAsync("I should see search results containing \"Stella\" products", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 150
    await testRunner.AndAsync("the results should include both kegs and bundles", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 151
    await testRunner.AndAsync("I should be able to filter the search results", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 152
    await testRunner.WhenAsync("I enter \"InvalidProductName123\" in the search box", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 153
    await testRunner.AndAsync("I click the search button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 154
    await testRunner.ThenAsync("I should see a \"no results found\" message", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 155
    await testRunner.AndAsync("I should see suggestions for alternative searches", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add products to shopping cart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PerfectDraft")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("E2E")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("P1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ShoppingCart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        public async System.Threading.Tasks.Task AddProductsToShoppingCart()
        {
            string[] tagsOfScenario = new string[] {
                    "P1",
                    "ShoppingCart",
                    "Smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Add products to shopping cart", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 158
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 159
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 160
    await testRunner.AndAsync("my cart is empty", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 161
    await testRunner.WhenAsync("I navigate to the \"Kegs\" section", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 162
    await testRunner.AndAsync("I add \"PerfectDraft Stella Artois 6L Keg\" to the cart", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 165
    await testRunner.WhenAsync("I click on the cart icon", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "Cart Information"});
                table5.AddRow(new string[] {
                            "Product name"});
                table5.AddRow(new string[] {
                            "Product image"});
                table5.AddRow(new string[] {
                            "Quantity"});
                table5.AddRow(new string[] {
                            "Unit price"});
                table5.AddRow(new string[] {
                            "Total price"});
#line 166
    await testRunner.ThenAsync("I should see the cart contents with:", ((string)(null)), table5, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Modify cart contents")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PerfectDraft")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("E2E")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("P1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ShoppingCart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        public async System.Threading.Tasks.Task ModifyCartContents()
        {
            string[] tagsOfScenario = new string[] {
                    "P1",
                    "ShoppingCart",
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Modify cart contents", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 175
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 176
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 177
    await testRunner.AndAsync("I have \"Stella Artois 6L Keg\" in my cart", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 178
    await testRunner.WhenAsync("I view my cart", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 179
    await testRunner.AndAsync("I increase the quantity to \"2\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 180
    await testRunner.ThenAsync("the cart should show quantity \"2\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 181
    await testRunner.AndAsync("the total price should be updated accordingly", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 182
    await testRunner.WhenAsync("I click \"Remove\" for the item", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 183
    await testRunner.ThenAsync("the cart should be empty", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 184
    await testRunner.AndAsync("the cart counter should show \"0\" items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add bundle products to cart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PerfectDraft")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("E2E")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("P1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ShoppingCart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        public async System.Threading.Tasks.Task AddBundleProductsToCart()
        {
            string[] tagsOfScenario = new string[] {
                    "P1",
                    "ShoppingCart",
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Add bundle products to cart", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 187
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 188
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 189
    await testRunner.WhenAsync("I navigate to the \"Bundles\" section", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 190
    await testRunner.AndAsync("I select a \"PerfectDraft Machine Bundle\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 191
    await testRunner.AndAsync("I add the bundle to my cart", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "Bundle Contents"});
                table6.AddRow(new string[] {
                            "PerfectDraft Machine"});
                table6.AddRow(new string[] {
                            "Beer keg"});
                table6.AddRow(new string[] {
                            "Glasses"});
#line 192
    await testRunner.ThenAsync("the cart should contain all bundle items:", ((string)(null)), table6, "Then ");
#line hidden
#line 197
    await testRunner.AndAsync("the bundle discount should be applied", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 198
    await testRunner.AndAsync("the total should reflect the bundle price", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Register new user account")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PerfectDraft")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("E2E")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("P2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UserRegistration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        public async System.Threading.Tasks.Task RegisterNewUserAccount()
        {
            string[] tagsOfScenario = new string[] {
                    "P2",
                    "UserRegistration",
                    "Smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Register new user account", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 201
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 202
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 203
    await testRunner.WhenAsync("I click on \"Account\" in the navigation", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 204
    await testRunner.AndAsync("I click \"Register\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table7.AddRow(new string[] {
                            "Password",
                            "SecurePassword123"});
                table7.AddRow(new string[] {
                            "Confirm Password",
                            "SecurePassword123"});
                table7.AddRow(new string[] {
                            "First Name",
                            "John"});
                table7.AddRow(new string[] {
                            "Last Name",
                            "Doe"});
                table7.AddRow(new string[] {
                            "Date of Birth",
                            "15/06/1990"});
#line 205
    await testRunner.AndAsync("I fill in the registration form with email \"test.user@example.com\":", ((string)(null)), table7, "And ");
#line hidden
#line 212
    await testRunner.AndAsync("I accept the terms and conditions", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 213
    await testRunner.AndAsync("I accept age verification (18+)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 214
    await testRunner.AndAsync("I click \"Create Account\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 215
    await testRunner.ThenAsync("I should see a registration confirmation message", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 216
    await testRunner.AndAsync("I should receive an email verification for \"test.user@example.com\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 217
    await testRunner.AndAsync("I should be automatically logged in", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("User login and logout")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PerfectDraft")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("E2E")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("P1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UserAuthentication")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Smoke")]
        public async System.Threading.Tasks.Task UserLoginAndLogout()
        {
            string[] tagsOfScenario = new string[] {
                    "P1",
                    "UserAuthentication",
                    "Smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("User login and logout", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 220
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 221
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 222
    await testRunner.AndAsync("I have a registered account with email \"test.user@example.com\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 223
    await testRunner.WhenAsync("I click on \"Account\" in the navigation", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 224
    await testRunner.AndAsync("I click \"Login\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 225
    await testRunner.AndAsync("I login with email \"test.user@example.com\" and password \"SecurePassword123\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 226
    await testRunner.ThenAsync("I should be logged in successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 227
    await testRunner.AndAsync("I should see \"Welcome John\" in the account section", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 228
    await testRunner.WhenAsync("I click \"Logout\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 229
    await testRunner.ThenAsync("I should be logged out", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 230
    await testRunner.AndAsync("I should see the \"Login\" option again", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Complete checkout process as registered user")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PerfectDraft")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("E2E")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("P1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Checkout")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Critical")]
        public async System.Threading.Tasks.Task CompleteCheckoutProcessAsRegisteredUser()
        {
            string[] tagsOfScenario = new string[] {
                    "P1",
                    "Checkout",
                    "Critical"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Complete checkout process as registered user", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 233
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 234
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 235
    await testRunner.AndAsync("I am logged in with email \"test.user@example.com\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 236
    await testRunner.AndAsync("I have \"Stella Artois 6L Keg\" in my cart", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 237
    await testRunner.WhenAsync("I proceed to checkout", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                            "Section"});
                table8.AddRow(new string[] {
                            "Order summary"});
                table8.AddRow(new string[] {
                            "Shipping address"});
                table8.AddRow(new string[] {
                            "Delivery options"});
                table8.AddRow(new string[] {
                            "Payment method"});
#line 238
    await testRunner.ThenAsync("I should see the checkout page with:", ((string)(null)), table8, "Then ");
#line hidden
#line 244
    await testRunner.WhenAsync("I confirm my shipping address", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 245
    await testRunner.AndAsync("I select \"Standard Delivery\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table9 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table9.AddRow(new string[] {
                            "Card Number",
                            "4532123456789012"});
                table9.AddRow(new string[] {
                            "Expiry Date",
                            "12/25"});
                table9.AddRow(new string[] {
                            "CVV",
                            "123"});
                table9.AddRow(new string[] {
                            "Cardholder Name",
                            "John Doe"});
#line 246
    await testRunner.AndAsync("I enter valid payment details:", ((string)(null)), table9, "And ");
#line hidden
#line 252
    await testRunner.AndAsync("I click \"Place Order\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 253
    await testRunner.ThenAsync("I should see an order confirmation page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 254
    await testRunner.AndAsync("I should receive an order confirmation email at \"test.user@example.com\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 255
    await testRunner.AndAsync("I should see an order tracking number", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Complete checkout process as guest user")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PerfectDraft")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("E2E")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("P1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Checkout")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Critical")]
        public async System.Threading.Tasks.Task CompleteCheckoutProcessAsGuestUser()
        {
            string[] tagsOfScenario = new string[] {
                    "P1",
                    "Checkout",
                    "Critical"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Complete checkout process as guest user", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 258
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 259
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 260
    await testRunner.AndAsync("I am not logged in", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 261
    await testRunner.AndAsync("I have \"Stella Artois 6L Keg\" in my cart", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 262
    await testRunner.WhenAsync("I proceed to checkout", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 263
    await testRunner.AndAsync("I select \"Checkout as Guest\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table10 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table10.AddRow(new string[] {
                            "First Name",
                            "Jane"});
                table10.AddRow(new string[] {
                            "Last Name",
                            "Smith"});
                table10.AddRow(new string[] {
                            "Phone Number",
                            "+44 7700 900123"});
                table10.AddRow(new string[] {
                            "Address Line 1",
                            "123 Test Street"});
                table10.AddRow(new string[] {
                            "City",
                            "London"});
                table10.AddRow(new string[] {
                            "Postcode",
                            "SW1A 1AA"});
#line 264
    await testRunner.AndAsync("I fill in guest checkout information with email \"guest.user@example.com\":", ((string)(null)), table10, "And ");
#line hidden
#line 272
    await testRunner.AndAsync("I select \"Standard Delivery\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 273
    await testRunner.AndAsync("I enter valid payment details", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 274
    await testRunner.AndAsync("I confirm age verification (18+)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 275
    await testRunner.AndAsync("I click \"Place Order\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 276
    await testRunner.ThenAsync("I should see an order confirmation page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 277
    await testRunner.AndAsync("I should receive an order confirmation email at \"guest.user@example.com\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("View Beer Token information")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PerfectDraft")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("E2E")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("P2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BeerTokens")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        public async System.Threading.Tasks.Task ViewBeerTokenInformation()
        {
            string[] tagsOfScenario = new string[] {
                    "P2",
                    "BeerTokens",
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("View Beer Token information", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 280
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 281
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 282
    await testRunner.AndAsync("I am logged in as a registered user", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 283
    await testRunner.WhenAsync("I navigate to my account dashboard", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 284
    await testRunner.ThenAsync("I should see my Beer Token balance", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table11 = new global::Reqnroll.Table(new string[] {
                            "Earning Method",
                            "Token Value"});
                table11.AddRow(new string[] {
                            "Keg return",
                            "£5.00"});
                table11.AddRow(new string[] {
                            "Purchase reward (5%)",
                            "Variable"});
                table11.AddRow(new string[] {
                            "Guest order (3 days)",
                            "Variable"});
#line 285
    await testRunner.AndAsync("I should see information about earning tokens:", ((string)(null)), table11, "And ");
#line hidden
#line 290
    await testRunner.AndAsync("I should see token expiration information \"6 months\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 291
    await testRunner.AndAsync("I should see how to redeem tokens", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Apply Beer Tokens during checkout")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PerfectDraft")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("E2E")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("P2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("BeerTokens")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        public async System.Threading.Tasks.Task ApplyBeerTokensDuringCheckout()
        {
            string[] tagsOfScenario = new string[] {
                    "P2",
                    "BeerTokens",
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Apply Beer Tokens during checkout", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 294
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 295
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 296
    await testRunner.AndAsync("I am logged in as a user with \"£10.00\" in Beer Tokens", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 297
    await testRunner.AndAsync("I have \"Stella Artois 6L Keg\" priced at \"£32.50\" in my cart", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 298
    await testRunner.WhenAsync("I proceed to checkout", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 299
    await testRunner.ThenAsync("I should see my Beer Token balance \"£10.00\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 300
    await testRunner.WhenAsync("I select \"Apply Beer Tokens\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 301
    await testRunner.AndAsync("I choose to apply \"£10.00\" tokens", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 302
    await testRunner.ThenAsync("the order total should be reduced by \"£10.00\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 303
    await testRunner.AndAsync("my new total should be \"£22.50\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 304
    await testRunner.WhenAsync("I complete the checkout process", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 305
    await testRunner.ThenAsync("my Beer Token balance should be \"£0.00\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Initiate keg return process")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PerfectDraft")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("E2E")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("P2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("KegReturns")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        public async System.Threading.Tasks.Task InitiateKegReturnProcess()
        {
            string[] tagsOfScenario = new string[] {
                    "P2",
                    "KegReturns",
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Initiate keg return process", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 308
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 309
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 310
    await testRunner.AndAsync("I am logged in as a registered user", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 311
    await testRunner.WhenAsync("I navigate to \"Keg Returns\" section", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 312
    await testRunner.AndAsync("I click \"Return Kegs\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table12 = new global::Reqnroll.Table(new string[] {
                            "Return Method"});
                table12.AddRow(new string[] {
                            "Courier Collection"});
                table12.AddRow(new string[] {
                            "Community Store"});
#line 313
    await testRunner.ThenAsync("I should see the keg return options:", ((string)(null)), table12, "Then ");
#line hidden
#line 317
    await testRunner.WhenAsync("I select \"Courier Collection\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 318
    await testRunner.AndAsync("I specify \"2\" kegs to return", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 319
    await testRunner.AndAsync("I confirm my collection address", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 320
    await testRunner.ThenAsync("I should be able to generate return labels", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 321
    await testRunner.AndAsync("I should see the estimated Beer Token credit \"£10.00\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 322
    await testRunner.AndAsync("I should receive return instructions", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find Community Store locations")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PerfectDraft")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("E2E")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("P3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CommunityStore")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        public async System.Threading.Tasks.Task FindCommunityStoreLocations()
        {
            string[] tagsOfScenario = new string[] {
                    "P3",
                    "CommunityStore",
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Find Community Store locations", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 325
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 326
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 327
    await testRunner.WhenAsync("I navigate to \"Community Store Network\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 328
    await testRunner.AndAsync("I enter postcode \"SW1A 1AA\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 329
    await testRunner.AndAsync("I click \"Find Stores\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 330
    await testRunner.ThenAsync("I should see a list of nearby Community Stores", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table13 = new global::Reqnroll.Table(new string[] {
                            "Store Information"});
                table13.AddRow(new string[] {
                            "Store name"});
                table13.AddRow(new string[] {
                            "Address"});
                table13.AddRow(new string[] {
                            "Distance"});
                table13.AddRow(new string[] {
                            "Opening hours"});
                table13.AddRow(new string[] {
                            "Available services"});
#line 331
    await testRunner.AndAsync("each store should show:", ((string)(null)), table13, "And ");
#line hidden
#line 338
    await testRunner.AndAsync("I should be able to get directions to selected stores", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("View and select bundle options")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PerfectDraft")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("E2E")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("P2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Bundles")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        public async System.Threading.Tasks.Task ViewAndSelectBundleOptions()
        {
            string[] tagsOfScenario = new string[] {
                    "P2",
                    "Bundles",
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("View and select bundle options", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 341
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 342
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 343
    await testRunner.WhenAsync("I navigate to \"Bundles\" section", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table14 = new global::Reqnroll.Table(new string[] {
                            "Bundle Type"});
                table14.AddRow(new string[] {
                            "PerfectDraft Machine Bundle"});
                table14.AddRow(new string[] {
                            "PerfectDraft Pro Bundle"});
                table14.AddRow(new string[] {
                            "Match Day Keg Pack"});
                table14.AddRow(new string[] {
                            "Seasonal Keg Packs"});
#line 344
    await testRunner.ThenAsync("I should see available bundle types:", ((string)(null)), table14, "Then ");
#line hidden
#line 350
    await testRunner.WhenAsync("I select \"PerfectDraft Pro Bundle\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 351
    await testRunner.ThenAsync("I should see bundle contents clearly listed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 352
    await testRunner.AndAsync("I should see bundle price vs individual prices", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 353
    await testRunner.AndAsync("I should see savings amount", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 354
    await testRunner.AndAsync("bundle customization options should be available", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("View promotional keg packs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PerfectDraft")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("E2E")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("P2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PromotionalOffers")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        public async System.Threading.Tasks.Task ViewPromotionalKegPacks()
        {
            string[] tagsOfScenario = new string[] {
                    "P2",
                    "PromotionalOffers",
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("View promotional keg packs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 357
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 358
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 359
    await testRunner.WhenAsync("I navigate to promotional keg packs", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 360
    await testRunner.ThenAsync("I should see current offers like \"Match Day Keg Pack\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table15 = new global::Reqnroll.Table(new string[] {
                            "Pack Size",
                            "Price"});
                table15.AddRow(new string[] {
                            "2 kegs",
                            "£60.00"});
                table15.AddRow(new string[] {
                            "3 kegs",
                            "£85.00"});
#line 361
    await testRunner.AndAsync("I should see pricing options:", ((string)(null)), table15, "And ");
#line hidden
#line 365
    await testRunner.WhenAsync("I select \"3 kegs for £85.00\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 366
    await testRunner.ThenAsync("I should be able to choose from available keg options", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 367
    await testRunner.AndAsync("I should see the discount calculation", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 368
    await testRunner.AndAsync("promotional terms should be clearly displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("View order history as registered user")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PerfectDraft")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("E2E")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("P2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("OrderHistory")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Regression")]
        public async System.Threading.Tasks.Task ViewOrderHistoryAsRegisteredUser()
        {
            string[] tagsOfScenario = new string[] {
                    "P2",
                    "OrderHistory",
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("View order history as registered user", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 371
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 372
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 373
    await testRunner.AndAsync("I am logged in as a user with previous orders", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 374
    await testRunner.WhenAsync("I navigate to \"My Orders\" in my account", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 375
    await testRunner.ThenAsync("I should see a list of my previous orders", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table16 = new global::Reqnroll.Table(new string[] {
                            "Order Information"});
                table16.AddRow(new string[] {
                            "Order number"});
                table16.AddRow(new string[] {
                            "Order date"});
                table16.AddRow(new string[] {
                            "Order total"});
                table16.AddRow(new string[] {
                            "Order status"});
                table16.AddRow(new string[] {
                            "Tracking info"});
#line 376
    await testRunner.AndAsync("each order should display:", ((string)(null)), table16, "And ");
#line hidden
#line 383
    await testRunner.WhenAsync("I click on an order", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 384
    await testRunner.ThenAsync("I should see detailed order information", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 385
    await testRunner.AndAsync("I should be able to track the shipment", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 386
    await testRunner.AndAsync("I should have options to reorder or contact support", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Responsive design functionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PerfectDraft")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("E2E")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("P1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ResponsiveDesign")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrossBrowser")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Mobile Phone", "", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Tablet", "", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Desktop", "", null)]
        public async System.Threading.Tasks.Task ResponsiveDesignFunctionality(string device, string notUsed6248, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "P1",
                    "ResponsiveDesign",
                    "CrossBrowser"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Device", device);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Responsive design functionality", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 389
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 390
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 391
    await testRunner.WhenAsync(string.Format("I access the site on \"{0}\"", device), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 392
    await testRunner.ThenAsync(string.Format("the layout should be optimized for \"{0}\"", device), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 393
    await testRunner.AndAsync("all navigation elements should be accessible", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 394
    await testRunner.AndAsync("the shopping cart functionality should work", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 395
    await testRunner.AndAsync("the checkout process should be functional", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 396
    await testRunner.AndAsync("text should be readable without zooming", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Website performance requirements")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PerfectDraft")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("E2E")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("P1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Performance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("NonFunctional")]
        public async System.Threading.Tasks.Task WebsitePerformanceRequirements()
        {
            string[] tagsOfScenario = new string[] {
                    "P1",
                    "Performance",
                    "NonFunctional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Website performance requirements", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 405
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 406
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 407
    await testRunner.WhenAsync("I navigate to any page", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 408
    await testRunner.ThenAsync("the page should load within \"3\" seconds", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 409
    await testRunner.AndAsync("images should load progressively", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 410
    await testRunner.AndAsync("the shopping cart should respond within \"1\" second", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 411
    await testRunner.AndAsync("the search functionality should return results within \"2\" seconds", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Basic accessibility compliance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PerfectDraft")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("E2E")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("P2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Accessibility")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("NonFunctional")]
        public async System.Threading.Tasks.Task BasicAccessibilityCompliance()
        {
            string[] tagsOfScenario = new string[] {
                    "P2",
                    "Accessibility",
                    "NonFunctional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Basic accessibility compliance", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 414
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 415
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 416
    await testRunner.WhenAsync("I navigate through the site using keyboard only", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 417
    await testRunner.ThenAsync("all interactive elements should be accessible", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 418
    await testRunner.AndAsync("focus indicators should be clearly visible", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 419
    await testRunner.AndAsync("alt text should be provided for all images", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 420
    await testRunner.AndAsync("color contrast should meet accessibility standards", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 421
    await testRunner.AndAsync("screen reader compatibility should be maintained", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Handle common error scenarios")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PerfectDraft")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("E2E")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("P1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ErrorHandling")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Edge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Page not found (404)", "", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Server error (500)", "", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Network connection timeout", "", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Payment processing failure", "", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Out of stock during checkout", "", null)]
        public async System.Threading.Tasks.Task HandleCommonErrorScenarios(string errorScenario, string notUsed6248, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "P1",
                    "ErrorHandling",
                    "Edge"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Error Scenario", errorScenario);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Handle common error scenarios", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 424
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 425
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 426
    await testRunner.WhenAsync(string.Format("I encounter the scenario \"{0}\"", errorScenario), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 427
    await testRunner.ThenAsync("I should see an appropriate error message", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 428
    await testRunner.AndAsync("I should have options to recover or get help", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 429
    await testRunner.AndAsync("the error should be logged for support purposes", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Form validation and security")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PerfectDraft Website Core Functionality")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PerfectDraft")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("E2E")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("P2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("DataValidation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Security")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("invalid-email", "", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("@example.com", "", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("user@", "", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("user..name@example.com", "", null)]
        public async System.Threading.Tasks.Task FormValidationAndSecurity(string email, string notUsed6248, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "P2",
                    "DataValidation",
                    "Security"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Email", email);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Form validation and security", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 440
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 441
    await testRunner.GivenAsync("I am on the UK website", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table17 = new global::Reqnroll.Table(new string[] {
                            "Invalid Data Type",
                            "Value"});
                table17.AddRow(new string[] {
                            "Invalid email format",
                            string.Format("{0}", email)});
                table17.AddRow(new string[] {
                            "Weak password",
                            "123"});
                table17.AddRow(new string[] {
                            "Underage date",
                            "15/06/2010"});
                table17.AddRow(new string[] {
                            "Missing required fields",
                            "<empty>"});
#line 442
    await testRunner.WhenAsync(string.Format("I attempt to register with email \"{0}\" and invalid data:", email), ((string)(null)), table17, "When ");
#line hidden
#line 448
    await testRunner.ThenAsync("I should see appropriate validation messages", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 449
    await testRunner.AndAsync("the form should not submit", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 450
    await testRunner.AndAsync("security measures should prevent malicious input", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 451
    await testRunner.AndAsync("sensitive data should be properly encrypted", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
